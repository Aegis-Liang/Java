1. Test 10: check that data type is immutable by testing whether each method
            returns the same value, regardless of any intervening operations
     * input8.txt
       - failed after 27 operations involving BruteCollinearPoints
       - first and last call to segments() returned different arrays

       - failed on trial 1 of 100

     * equidistant.txt
       - failed after 9 operations involving BruteCollinearPoints
       - first and last call to segments() returned different arrays

       - sequence of operations was:
             BruteCollinearPoints collinear = new BruteCollinearPoints(points);
             collinear.numberOfSegments() -> 4
             mutate points[] array that was passed to constructor
             mutate points[] array that was passed to constructor
             collinear.numberOfSegments() -> 4
             collinear.segments()
             collinear.numberOfSegments() -> 4
             mutate array returned by last call to segments()
             collinear.segments()

       - failed on trial 1 of 100

   ==> FAILED

   Because the linkedlist is empty when the segment function is call in the second or more time.
   Developer always make this bug and hard to knowing this.

      public LineSegment[] segments()
       {
           LineSegment[] result = new LineSegment[this.numLineSegments];
           for(int i=0; i<this.numLineSegments;i++)
               result[i] = this.llistLineSegment.pop();
           return result;
       }




   Test 10: check that data type is immutable by testing whether each method
            returns the same value, regardless of any intervening operations
     * input8.txt
       - failed after 9 operations involving BruteCollinearPoints
       - first and last call to segments() returned different arrays

       - sequence of operations was:
             BruteCollinearPoints collinear = new BruteCollinearPoints(points);
             collinear.numberOfSegments() -> 2
             collinear.segments()
             collinear.segments()
             collinear.segments()
             collinear.segments()
             mutate array returned by last call to segments()
             mutate array returned by last call to segments()
             collinear.segments()

       - failed on trial 1 of 100

     * equidistant.txt
       - failed after 12 operations involving BruteCollinearPoints
       - first and last call to segments() returned different arrays

       - sequence of operations was:
             BruteCollinearPoints collinear = new BruteCollinearPoints(points);
             mutate points[] array that was passed to constructor
             mutate points[] array that was passed to constructor
             mutate points[] array that was passed to constructor
             collinear.segments()
             mutate points[] array that was passed to constructor
             collinear.segments()
             collinear.segments()
             mutate array returned by last call to segments()
             mutate array returned by last call to segments()
             collinear.numberOfSegments() -> 4
             collinear.segments()

       - failed on trial 1 of 100

   ==> FAILED

    Because the segment function returns a reference not a value, its data type is mutable.

    public LineSegment[] segments()
    {
        return this.lineSegments;
    }

    The assignment of this.lineSegments is placed in construct function, this will make the Timing score fail.
    Use the iterator ResizingArrayStack could do the trick.


2. Test 11: check that data type does not mutate the constructor argument
     * input8.txt
       - data type mutated the points[] array
       - data type should have no side effects unless documented in API

     * equidistant.txt
       - data type mutated the points[] array
       - data type should have no side effects unless documented in API

   ==> FAILED


   The problem would be this line of code:

        Arrays.sort(points);

   The sorting will mutate the order of the point array, which is a side affect.
   Use clone to make another copy.

   After adding clone(), the timing cannot pass some tests, got lower score.

3. 5-or-more points collinear issue, such like:
    (6000, 6000) -> (9000, 9000)
    (5000, 5000) -> (9000, 9000)
    (4000, 4000) -> (9000, 9000)
    (3000, 3000) -> (9000, 9000)
    (2000, 2000) -> (9000, 9000)
    (1000, 1000) -> (9000, 9000)

    1) LineSegment.java cannot be modified, no sorting interface is supported.
    2) LineSegment.java cannot be modified, no property can be get, it only provides method to string to print "p -> q".
    3) Store the points which are in result collinear lines, this will make the correctness score full, but miss 2 score in timing since it's more complex in the construct function.

    Solution: 1) Sort all the input points, make sure the base point starts from origin point.
              2) Loop the base points.
              3) Split the points to 2 arrays, one for storing left elements to base point, the other for the right.
              4) Calculates the slopes that the left elements to the base point, and store them into slopes array.
              5) If a collinear line is found in right array, calculate the slope.
              6) If the slope could be found in left array, that means the line is already included, skip to next.
                 Otherwise put this line into result.
