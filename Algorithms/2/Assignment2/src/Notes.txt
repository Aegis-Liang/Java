1 It's very good to learning the tests in this assignment, they do a lot of tests by randomly run many functions,
  and get back the result and do the statistic analyze, I found the outcomes that the last has never swapped,
  such as "AB", "BAC", "CBAD". In this case, it's easy to find where the issue is.

  for (int x = 0; x < (last - 1 + q.length - first) % q.length; x++)

  ===>

  for (int x = 0; x < (last - 1 + q.length - first) % q.length + 1; x++)



  Test 15: check randomness of iterator() by enqueueing n items, iterating over those
           n items, and seeing whether each of the n! permutations is equally likely
    * n = 2, trials = 12000

              value  observed  expected   2*O*ln(O/E)
          -------------------------------------------
                 AB     12000    6000.0      16635.53
                 BA         0    6000.0          0.00
          -------------------------------------------
                        12000   12000.0      16635.53

      G-statistic = 16635.53 (p-value = 0.000000, reject if p-value <= 0.0001)
      Note: a correct solution will fail this test by bad luck 1 time in 10,000.

    * n = 3, trials = 12000

              value  observed  expected   2*O*ln(O/E)
          -------------------------------------------
                ABC      6027    2000.0      13296.79
                ACB         0    2000.0          0.00
                BAC      5973    2000.0      13070.14
                BCA         0    2000.0          0.00
                CAB         0    2000.0          0.00
                CBA         0    2000.0          0.00
          -------------------------------------------
                        12000   12000.0      26366.94

      G-statistic = 26366.94 (p-value = 0.000000, reject if p-value <= 0.0001)
      Note: a correct solution will fail this test by bad luck 1 time in 10,000.

    * n = 4, trials = 12000

              value  observed  expected   2*O*ln(O/E)
          -------------------------------------------
               ABCD      1967     500.0       5388.23
               ABDC         0     500.0          0.00
               ACBD      1992     500.0       5507.03
               ACDB         0     500.0          0.00
               ADBC         0     500.0          0.00
               ADCB         0     500.0          0.00
               BACD      2003     500.0       5559.50
               BADC         0     500.0          0.00
               BCAD      2016     500.0       5621.67
               BCDA         0     500.0          0.00
               BDAC         0     500.0          0.00
               BDCA         0     500.0          0.00
               CABD      1995     500.0       5521.33
               CADB         0     500.0          0.00
               CBAD      2027     500.0       5674.40
               CBDA         0     500.0          0.00
               CDAB         0     500.0          0.00
               CDBA         0     500.0          0.00
               DABC         0     500.0          0.00
               DACB         0     500.0          0.00
               DBAC         0     500.0          0.00
               DBCA         0     500.0          0.00
               DCAB         0     500.0          0.00
               DCBA         0     500.0          0.00
          -------------------------------------------
                        12000   12000.0      33272.15

      G-statistic = 33272.15 (p-value = 0.000000, reject if p-value <= 0.0001)
      Note: a correct solution will fail this test by bad luck 1 time in 10,000.

    * n = 5, trials = 12000

  ==> FAILED


2. Test 9: create two nested iterators over the same randomized queue
     * n = 10
       - outer iterator failed to return one (or more) of the 10 items
       - outer iterator returned the same item more than once

     * n = 50
       - outer iterator failed to return one (or more) of the 50 items
       - outer iterator returned the same item more than once

   ==> FAILED

   Test 10: create two parallel iterators over the same randomized queue
     * n = 10
       - two iterators return the same sequence of values
       - they should return the same set of values but in a
         different order

     * n = 50
       - two iterators return the same sequence of values
       - they should return the same set of values but in a
         different order

   ==> FAILED


            RandomizedQueue<Integer> q = new RandomizedQueue<Integer>();

            q.enqueue(2);
            q.enqueue(3);
            q.enqueue(1);
            q.enqueue(0);
            q.enqueue(4);
            q.enqueue(5);

            Iterator<Integer> it = q.iterator();
            Iterator<Integer> it2 = q.iterator();

            while (it.hasNext())
                System.out.println("Iterator it " + it.next());

            while (it2.hasNext())
                System.out.println("Iterator it2 " + it2.next());

   Observe that two iterators are returning exactly the same sequence. Not really random, is it?)) The issue here is pointed out by the assignment:

   Additionally, your iterator implementation must support operations next() and hasNext() in constant worst-case time; and construction in linear time; you may (and will need to) use a linear amount of extra memory per iterator.


   This could get 100 scores, but I don't think it's good enough since it copies the null items.

        public Iterator<Item> iterator() {
           for (int x = 0; x < (last - 1 + q.length - first) % q.length + 1; x++) { // need +1 at the end, otherwise the last item didn't swap
               int offsetChose = StdRandom.uniform(x + 1);
               int indexX = (x + first) % q.length;
               int indexChose = (offsetChose + first) % q.length;
               Item temp = q[indexChose];
               q[indexChose] = q[indexX];
               q[indexX] = temp;
           }

           Item[] Result = (Item[]) new Object[q.length];
           for (int i=0;i<q.length;i++)
           {
               Result[i] = q[i];
           }

           return new ArrayIterator(Result);
       }

       // an iterator, doesn't implement remove() since it's optional
       private class ArrayIterator implements Iterator<Item> {
           private int i;
           private Item[] ItemRef;

           public ArrayIterator(Item[] Result)
           {
               this.i = 0;
               this.ItemRef = Result;
           }

           public boolean hasNext() {
               return i < n;
           }

           public void remove() {
               throw new UnsupportedOperationException();
           }

           public Item next() {
               if (!hasNext()) throw new NoSuchElementException();
               Item item = ItemRef[(i + first) % ItemRef.length];
               i++;
               return item;
           }
       }

   This guy is perfect:
    public Iterator<Item> iterator() {
        for (int x = 0; x < (last - 1 + q.length - first) % q.length + 1; x++) { // need +1 at the end, otherwise the last item didn't swap
            int offsetChose = StdRandom.uniform(x + 1);
            int indexX = (x + first) % q.length;
            int indexChose = (offsetChose + first) % q.length;
            Item temp = q[indexChose];
            q[indexChose] = q[indexX];
            q[indexX] = temp;
        }

        Item[] Result = (Item[]) new Object[q.length];
        for (int i=0;i<this.n;i++) {
            Result[i] = q[(first + i) % q.length];
        }

        return new ArrayIterator(Result);
    }

    // an iterator, doesn't implement remove() since it's optional
    private class ArrayIterator implements Iterator<Item> {
        private int i;
        private Item[] itemRef;

        public ArrayIterator(Item[] result) {
            this.i = 0;
            this.itemRef = result;
        }

        public boolean hasNext() {
            return i < n;
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }

        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = itemRef[i];
            i++;
            return item;
        }
    }

3.  Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                    created is equal to k
      * filename = tale.txt, n = 138653, k = 5
        - max size of RandomizedQueue object = 138653

      * filename = tale.txt, n = 138653, k = 50
        - max size of RandomizedQueue object = 138653

      * filename = tale.txt, n = 138653, k = 500
        - max size of RandomizedQueue object = 138653

      * filename = tale.txt, n = 138653, k = 5000
        - max size of RandomizedQueue object = 138653

      * filename = tale.txt, n = 138653, k = 50000
        - max size of RandomizedQueue object = 138653

    ==> FAILED


    This test is for the permutation client, where the task is to print k items out of n, uniformly chosen.

    The challenge is now to only use memory proportional to k instead of to n. Think of n as hideous large, but k comparably small.
    We are only interested in the k items any way, so why store all n? :)


    Solution:
    1) Input first k numbers into randomized queue. This will make sure all the randomized queue slots have element (no empty slot).
    2) Randomly generates a number that the index which current item need to swap.
    3) If above number is less than k, dequeue an item from the queue, and enqueue the current item into the queue.
    4) Dequeue all number from the queue for the output since the dequeue function is random.

    below code could solve this problem:

    public static void main(String[] args) {
            int k = Integer.parseInt(args[0]);
    //        int k = 3;
            int c = 0;

    //        In in = new In(args[0]);
    //        int n = in.readInt();

    //        RandomizedQueue<String> randQueue = new RandomizedQueue<>();
    //        while (!StdIn.isEmpty()) {
    //            String str = StdIn.readString();
    //            randQueue.enqueue(str);
    //        }

    //        Iterator<String> randIter = randQueue.iterator();
    //        for (int i = 0; i < n; i++)
    //            System.out.println(randIter.next());
            RandomizedQueue<String> randQueue = new RandomizedQueue<>();
            for (int i = 0; i < k; i++) {
                String str = StdIn.readString();
                randQueue.enqueue(str);
                c++;
            }
            while (!StdIn.isEmpty()) {
                String str = StdIn.readString();
                int x = StdRandom.uniform(c + 1); // if you gonna use uniform, must to add 1 to avoid c = 0
                if (x < k) {
                    randQueue.dequeue();
                    randQueue.enqueue(str);
                }
                c++;
            }
            for (int i = 0; i < k; i++) {
                System.out.println(randQueue.dequeue());
            }
        }

4. E:\Java\Algorithms\2\Assignment2\out\production\Assignment2> java -classpath ".;C:\Users\Aegis\algs4\algs4.jar" Permutation 3 < duplicates.txt