1. Funny handling twin() function

    public Board twin()                    // a board that is obtained by exchanging any pair of blocks
    {
        Board board2 = new Board(this.tiles);

        if(board2.tiles[0][0]==0 || board2.tiles[0][1]==0)
            this.swapTiles(board2, 1, 0, 1, 1);
        else
            this.swapTiles(board2, 0, 0, 0, 1);
        return board2;
    }

 2. Test 12a: check moves() with 3-by-3 file inputs
      * puzzle3x3-00.txt
      * puzzle3x3-01.txt
      * puzzle3x3-02.txt
      * puzzle3x3-03.txt
      * puzzle3x3-04.txt
      * puzzle3x3-05.txt
      * puzzle3x3-06.txt
      * puzzle3x3-07.txt
      * puzzle3x3-08.txt
      * puzzle3x3-09.txt
      * puzzle3x3-10.txt
      * puzzle3x3-11.txt
      * puzzle3x3-12.txt
      * puzzle3x3-13.txt
      * puzzle3x3-14.txt
      * puzzle3x3-15.txt
      * puzzle3x3-16.txt
      * puzzle3x3-17.txt
      * puzzle3x3-18.txt
      * puzzle3x3-19.txt
      * puzzle3x3-20.txt
      * puzzle3x3-21.txt
      * puzzle3x3-22.txt
      * puzzle3x3-23.txt
      * puzzle3x3-24.txt

            ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            OperationCountLimitExceededException
            Number of calls to methods in Board exceeds limit: 100000000
            ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

      The causation of this question is hard to find if you are having it.
      The reason is when you compare the predecessor and its neighbors, you probably compare itself to its neighbors,
      and this equals will never be true and a lot of node is add into pq.

      After modify this, the score is changed from 66 to 95 ^_^!

      int moveNeighbor = snCurrent.move+1;
      for (Board boardNeighbor : snCurrent.board.neighbors() )
          {
              if(!snCurrent.board.equals(boardNeighbor))
                  pq.insert(new SearchNode(boardNeighbor, moveNeighbor, snCurrent));
          }

          change to

      int moveNeighbor = snCurrent.move+1;
      for (Board boardNeighbor : snCurrent.board.neighbors() )
          {
              if(snCurrent.predecessor == null || !snCurrent.predecessor.board.equals(boardNeighbor))
                  pq.insert(new SearchNode(boardNeighbor, moveNeighbor, snCurrent));
          }


3. Test 4b: count Board operations (that should get called),
            rejecting if doesn't adhere to stricter caching limits

                  filename    Board()            equals()         manhattan()
   --------------------------------------------------------------------------
   => FAILED  puzzle20.txt       2289                2279               19593   (4.9x)
   => FAILED  puzzle22.txt       5549                5543               55223   (5.7x)
   => FAILED  puzzle21.txt       5619                5611               56779   (5.8x)
   => FAILED  puzzle23.txt       8445                8437               84891   (5.7x)
   => FAILED  puzzle24.txt       8683                8673               90319   (5.9x)
   => FAILED  puzzle25.txt      16416               16408              178407   (6.2x)
   => FAILED  puzzle27.txt      17947               17939              196755   (6.3x)
   => FAILED  puzzle29.txt      18711               18703              215665   (6.6x)
   => FAILED  puzzle26.txt      18990               18984              216419   (6.5x)
   => FAILED  puzzle28.txt      43202               43192              556059   (7.4x)
   => FAILED  puzzle30.txt      69148               69142              918633   (7.6x)
   => FAILED  puzzle31.txt      73809               73801              973639   (7.5x)
   => FAILED  puzzle39.txt     106459              106451             1330491   (7.1x)
   => FAILED  puzzle41.txt     166497              166487             2267133   (7.8x)
   => FAILED  puzzle34.txt     224829              224823             3230903   (8.2x)
   => FAILED  puzzle37.txt     246893              246885             3510733   (8.1x)
   => FAILED  puzzle44.txt     398823              398813             5790137   (8.3x)
   => FAILED  puzzle32.txt     771088              771078            12703027   (9.4x)
   => FAILED  puzzle35.txt     785712              785702            12448947   (9.1x)
   => FAILED  puzzle33.txt     921232              921224            15272641   (9.5x)
   => FAILED  puzzle43.txt    1565635             1565627            25775637   (9.4x)
   => FAILED  puzzle46.txt    1549058             1549050            25679235   (9.5x)
   => FAILED  puzzle40.txt    1649907             1649901            27742359   (9.6x)
   => FAILED  puzzle36.txt    3097813             3097803            56218043  (10.4x)
   => FAILED  puzzle45.txt    3607829             3607821            63336317  (10.0x)
   ==> 0/25 tests passed


   Total: 100/125 tests passed!