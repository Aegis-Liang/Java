1. Funny handling twin() function

    public Board twin()                    // a board that is obtained by exchanging any pair of blocks
    {
        Board board2 = new Board(this.tiles);

        if(board2.tiles[0][0]==0 || board2.tiles[0][1]==0)
            this.swapTiles(board2, 1, 0, 1, 1);
        else
            this.swapTiles(board2, 0, 0, 0, 1);
        return board2;
    }

 2. Test 12a: check moves() with 3-by-3 file inputs
      * puzzle3x3-00.txt
      * puzzle3x3-01.txt
      * puzzle3x3-02.txt
      * puzzle3x3-03.txt
      * puzzle3x3-04.txt
      * puzzle3x3-05.txt
      * puzzle3x3-06.txt
      * puzzle3x3-07.txt
      * puzzle3x3-08.txt
      * puzzle3x3-09.txt
      * puzzle3x3-10.txt
      * puzzle3x3-11.txt
      * puzzle3x3-12.txt
      * puzzle3x3-13.txt
      * puzzle3x3-14.txt
      * puzzle3x3-15.txt
      * puzzle3x3-16.txt
      * puzzle3x3-17.txt
      * puzzle3x3-18.txt
      * puzzle3x3-19.txt
      * puzzle3x3-20.txt
      * puzzle3x3-21.txt
      * puzzle3x3-22.txt
      * puzzle3x3-23.txt
      * puzzle3x3-24.txt

            ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            OperationCountLimitExceededException
            Number of calls to methods in Board exceeds limit: 100000000
            ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

      The causation of this question is hard to find if you are having it.
      The reason is when you compare the predecessor and its neighbors, you probably compare itself to its neighbors,
      and this equals will never be true and a lot of node is add into pq.

      After modify this, the score is changed from 66 to 95 ^_^!

      int moveNeighbor = snCurrent.move+1;
      for (Board boardNeighbor : snCurrent.board.neighbors() )
          {
              if(!snCurrent.board.equals(boardNeighbor))
                  pq.insert(new SearchNode(boardNeighbor, moveNeighbor, snCurrent));
          }

          change to

      int moveNeighbor = snCurrent.move+1;
      for (Board boardNeighbor : snCurrent.board.neighbors() )
          {
              if(snCurrent.predecessor == null || !snCurrent.predecessor.board.equals(boardNeighbor))
                  pq.insert(new SearchNode(boardNeighbor, moveNeighbor, snCurrent));
          }